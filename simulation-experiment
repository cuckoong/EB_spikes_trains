{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "5xT5gyZzcXd4"
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pystan\n",
    "import time\n",
    "import scipy.stats as stats\n",
    "import scipy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "3F-qPyRVq2Xj"
   },
   "source": [
    "## Simulation parameters and data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 51
    },
    "colab_type": "code",
    "id": "EpC4_fxScXeQ",
    "outputId": "5b9cb390-c63d-48e5-d739-5b83461cee00"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "8.033809620981208\n"
     ]
    }
   ],
   "source": [
    "def simulate(pars,seed):#simulation       \n",
    "\n",
    "    import scipy.special as sc\n",
    "    #Number of simulation trials\n",
    "    N_sim = pars['N_sim'] \n",
    "\n",
    "    #NB-means\n",
    "    r =pars['r']  \n",
    "\n",
    "    #neurons numbers\n",
    "    M = pars['M']\n",
    "\n",
    "    #network weights\n",
    "    b0= pars['b0']\n",
    "    #b = np.random.uniform(-0.9,0.9,M) #random select from -1 to 1; \n",
    "    b = pars['b']\n",
    "    #link function parameters\n",
    "    loggam=pars['loggam']\n",
    "    gam = np.exp(loggam)\n",
    "  \n",
    "    #sigma for beta prior\n",
    "    s = pars['s']\n",
    "\n",
    "    #trial bins\n",
    "    K = pars['K'] #bins\n",
    "\n",
    "    #input from other neuons\n",
    "    x = np.ones(K)*3\n",
    "    rng0 = np.random.default_rng(seed=2)\n",
    "    for i in range(M-1):\n",
    "        x_n = rng0.poisson(rng0.choice([6,8,7,5],p=[1/4]*4,size = 1),size = K)\n",
    "        x = np.row_stack([x,x_n])\n",
    "\n",
    "\n",
    "    # preset Î¸ \n",
    "    mu = np.zeros(K)\n",
    "\n",
    "    #preset y-true and y-simulatoin\n",
    "    y_true = np.zeros(K)\n",
    "    y_sim = np.zeros((K,N_sim))\n",
    "\n",
    "    # true y value\n",
    "    for i in range(K):\n",
    "        mu[i] = (gam*np.exp(b0 + np.dot(x[:,i],b))+1)**(-1/gam)\n",
    "        y_true[i] = r*(1/mu[i]-1) # true y value\n",
    "\n",
    "    #simulate y value, via discrete sampling\n",
    "    rng = np.random.default_rng(seed=seed)\n",
    "    for i in range(K):\n",
    "        for j in range(N_sim):\n",
    "            phi = rng.beta(s*mu[i],s*(1-mu[i]))\n",
    "            y_sim[i,j] = rng.negative_binomial(n = r, p = phi, size = 1)\n",
    "\n",
    "    y_sim = y_sim.astype(int)\n",
    "\n",
    "    print('simulation mse')\n",
    "    print(np.sqrt(np.mean((y_sim-y_true.reshape(K,1))**2)))\n",
    "    \n",
    "    \n",
    "    data = dict(x = x, y_sim = y_sim, y_true = y_true) \n",
    "    return data\n",
    "\n",
    "\n",
    "# start simulation\n",
    "\n",
    "pars = dict(\n",
    "#Number of simulation trials\n",
    "N_sim = 1,\n",
    "#trial bins\n",
    "K = 10,  #bins\n",
    "\n",
    "#NB-means\n",
    "r = 5,  \n",
    "#neurons numbers\n",
    "M = 20,\n",
    "#network weights\n",
    "b0= -0.5,\n",
    "#b = np.random.uniform(-0.9,0.9,M) #random select from -1 to 1; \n",
    "b = [-0.1,-0.2,-0.3,-0.4,\n",
    "     -0.1,-0.2,-0.3,-0.4,\n",
    "     0.1,0.2,0.3,0.4,\n",
    "     0.1,0.2,0.3,0.4,0.5,0.6,\n",
    "    -0.2,-0.3],\n",
    "#link function parameters\n",
    "loggam=np.log(7),\n",
    "#sigma for beta prior\n",
    "s = 50,\n",
    ")\n",
    "\n",
    "data = simulate(pars,2)\n",
    "x = data['x']\n",
    "y_sim = data['y_sim']\n",
    "y_true = data['y_true']\n",
    "\n",
    "N_sim = pars['N_sim']\n",
    "r = pars['r']\n",
    "M = pars['M']\n",
    "b0 = pars['b0']\n",
    "b = pars['b']\n",
    "loggam = pars['loggam']\n",
    "s = pars['s']\n",
    "K = pars['K']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "-5JhNiA667jT"
   },
   "source": [
    "## mcmc using stan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 207
    },
    "colab_type": "code",
    "id": "btbqqoE7cXeD",
    "outputId": "9113e0c3-a641-4ba4-aeb8-c1ff49543188"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:pystan:COMPILING THE C++ CODE FOR MODEL anon_model_c1f989d8f91d7ff11a5e3c5b833c6d61 NOW.\n",
      "INFO:pystan:OS: linux, Python: 3.6.10 |Anaconda, Inc.| (default, Mar 25 2020, 23:51:54) \n",
      "[GCC 7.3.0], Cython 0.29.16\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Compiling /tmp/pystan_q9emodid/stanfit4anon_model_c1f989d8f91d7ff11a5e3c5b833c6d61_4695395412552376605.pyx because it changed.\n",
      "[1/1] Cythonizing /tmp/pystan_q9emodid/stanfit4anon_model_c1f989d8f91d7ff11a5e3c5b833c6d61_4695395412552376605.pyx\n",
      "building 'stanfit4anon_model_c1f989d8f91d7ff11a5e3c5b833c6d61_4695395412552376605' extension\n",
      "creating /tmp/pystan_q9emodid/tmp\n",
      "creating /tmp/pystan_q9emodid/tmp/pystan_q9emodid\n",
      "/home/msc/app/anaconda3/envs/mcmcstan/bin/x86_64-conda_cos6-linux-gnu-cc -DNDEBUG -fwrapv -O2 -Wall -Wstrict-prototypes -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/msc/app/anaconda3/envs/mcmcstan/include -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/msc/app/anaconda3/envs/mcmcstan/include -fPIC -DBOOST_RESULT_OF_USE_TR1 -DBOOST_NO_DECLTYPE -DBOOST_DISABLE_ASSERTS -I/tmp/pystan_q9emodid -I/home/msc/app/anaconda3/envs/mcmcstan/lib/python3.6/site-packages/pystan -I/home/msc/app/anaconda3/envs/mcmcstan/lib/python3.6/site-packages/pystan/stan/src -I/home/msc/app/anaconda3/envs/mcmcstan/lib/python3.6/site-packages/pystan/stan/lib/stan_math -I/home/msc/app/anaconda3/envs/mcmcstan/lib/python3.6/site-packages/pystan/stan/lib/stan_math/lib/eigen_3.3.3 -I/home/msc/app/anaconda3/envs/mcmcstan/lib/python3.6/site-packages/pystan/stan/lib/stan_math/lib/boost_1.69.0 -I/home/msc/app/anaconda3/envs/mcmcstan/lib/python3.6/site-packages/pystan/stan/lib/stan_math/lib/sundials_4.1.0/include -I/home/msc/app/anaconda3/envs/mcmcstan/lib/python3.6/site-packages/numpy/core/include -I/home/msc/app/anaconda3/envs/mcmcstan/include/python3.6m -c /tmp/pystan_q9emodid/stanfit4anon_model_c1f989d8f91d7ff11a5e3c5b833c6d61_4695395412552376605.cpp -o /tmp/pystan_q9emodid/tmp/pystan_q9emodid/stanfit4anon_model_c1f989d8f91d7ff11a5e3c5b833c6d61_4695395412552376605.o -O2 -ftemplate-depth-256 -Wno-unused-function -Wno-uninitialized -std=c++1y\n",
      "/home/msc/app/anaconda3/envs/mcmcstan/bin/x86_64-conda_cos6-linux-gnu-c++ -pthread -shared -Wl,-O2 -Wl,--sort-common -Wl,--as-needed -Wl,-z,relro -Wl,-z,now -Wl,-rpath,/home/msc/app/anaconda3/envs/mcmcstan/lib -L/home/msc/app/anaconda3/envs/mcmcstan/lib -Wl,-O2 -Wl,--sort-common -Wl,--as-needed -Wl,-z,relro -Wl,-z,now -Wl,-rpath,/home/msc/app/anaconda3/envs/mcmcstan/lib -L/home/msc/app/anaconda3/envs/mcmcstan/lib -Wl,-O2 -Wl,--sort-common -Wl,--as-needed -Wl,-z,relro -Wl,-z,now -Wl,--disable-new-dtags -Wl,--gc-sections -Wl,-rpath,/home/msc/app/anaconda3/envs/mcmcstan/lib -Wl,-rpath-link,/home/msc/app/anaconda3/envs/mcmcstan/lib -L/home/msc/app/anaconda3/envs/mcmcstan/lib -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/msc/app/anaconda3/envs/mcmcstan/include -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/msc/app/anaconda3/envs/mcmcstan/include /tmp/pystan_q9emodid/tmp/pystan_q9emodid/stanfit4anon_model_c1f989d8f91d7ff11a5e3c5b833c6d61_4695395412552376605.o -o /tmp/pystan_q9emodid/stanfit4anon_model_c1f989d8f91d7ff11a5e3c5b833c6d61_4695395412552376605.cpython-36m-x86_64-linux-gnu.so\n"
     ]
    }
   ],
   "source": [
    "model = \"\"\"\n",
    "data {\n",
    "  int<lower=1> N;    // rows of data, bins \n",
    "  int<lower=1> P;    // columns of data, trials\n",
    "  int<lower=1> M;    // rows of neurons\n",
    "  real x[M,N];       // M neurons, N bins\n",
    "  int<lower=0> y[N,P]; // response\n",
    "}\n",
    "transformed data{\n",
    "  real y_sum[N];\n",
    "  for(i in 1:N){\n",
    "    y_sum[i] = sum(y[i,]);\n",
    "  }\n",
    "}\n",
    "\n",
    "parameters {\n",
    "  real<lower=1,upper=7> r; // neg. binomial mean parameter\n",
    "  real<lower=-1,upper=1>  b0;  // intercept\n",
    "  real<lower=-1,upper=1>  b[M];  // slopes\n",
    "  real<lower=30,upper=70> s;  //sigma\n",
    "  real<lower=0,upper=3> loggam; //gamma\n",
    "  real<lower=1e-9,upper=1-1e-9> phi[N];\n",
    "  real<lower=1e-9,upper=1e9> l[N];\n",
    "}\n",
    "\n",
    "\n",
    "transformed parameters{\n",
    "  real<lower=0,upper=1> mu[N]; \n",
    "  real<lower=0> alpha_0[N];\n",
    "  real<lower=0> beta_0[N];\n",
    "  real gam;\n",
    "  gam = exp(loggam);\n",
    "  for(i in 1:N){\n",
    "    mu[i] = (gam*exp(b0 + dot_product(x[,i],b))+1)^(-1/gam);\n",
    "    alpha_0[i] = s*mu[i];\n",
    "    beta_0[i] = s*(1-mu[i]);\n",
    "    }\n",
    "}\n",
    "\n",
    "model {   \n",
    "  // data model:\n",
    "  for(i in 1:N){\n",
    "    phi[i] ~ beta(alpha_0[i], beta_0[i]);\n",
    "    l[i] ~ gamma(r,phi[i]/(1-phi[i]));\n",
    "    for(j in 1:P){\n",
    "     y[i,j] ~ poisson(l[i]);\n",
    "    }\n",
    "  }\n",
    "}\n",
    "\n",
    "generated quantities {\n",
    "  vector[N] y_new_sod_glm;\n",
    "  for (n in 1:N){\n",
    "    y_new_sod_glm[n] = r*(1/mu[n]-1);\n",
    "  }\n",
    "}\n",
    "\"\"\"\n",
    "\n",
    "sm = pystan.StanModel(model_code=model, verbose = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "9EUSqvKbr2q6"
   },
   "source": [
    "### Optimization models\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YdAymJlv1LuK"
   },
   "outputs": [],
   "source": [
    "#objective function, calculate the maximum likelihood for SOD model\n",
    "def S0D_sum(x0, K, y, x):\n",
    "  r=x0[0]\n",
    "  b0=x0[1]\n",
    "  loggam=x0[2]\n",
    "  s=x0[3]\n",
    "  b=x0[4:]\n",
    "  import scipy.special as sc\n",
    "  LL_sum = np.zeros(y_sim.shape)\n",
    "  for i in range(y_sim.shape[0]):\n",
    "    gam = np.exp(loggam)\n",
    "    mu = (gam*np.exp(b0+np.dot(x[:,i],b))+1)**(-1/gam)\n",
    "    for j in range(y_sim.shape[1]):\n",
    "      LL_sum[i,j]=sc.gammaln(r+s*mu)+sc.gammaln(y_sim[i,j]+s-s*mu)+ \\\n",
    "          sc.gammaln(r+y_sim[i,j])+sc.gammaln(s)-\\\n",
    "          sc.gammaln(r+y_sim[i,j]+s)-sc.gammaln(r)-\\\n",
    "          sc.gammaln(s*mu)-sc.gammaln(s-s*mu)-sc.gammaln(y_sim[i,j]+1)\n",
    "\n",
    "\n",
    "  LL_sum = -1*np.sum(LL_sum)\n",
    "  return LL_sum\n",
    "\n",
    "\n",
    "#objective function, calculate the maximum likelihood for NBGLM model\n",
    "def NBGLM_sum(x0, K, y, x):\n",
    "  r=x0[0]\n",
    "  b0=x0[1]\n",
    "  loggam=x0[2]\n",
    "  b=x0[3:]\n",
    "  gam = np.exp(loggam)\n",
    "\n",
    "  import scipy.special as sc\n",
    "  LL_sum = np.zeros(y_sim.shape)\n",
    "\n",
    "  for i in range(y_sim.shape[0]):\n",
    "    mu = (gam*np.exp(b0+np.dot(x[:,i],b))+1)**(-1/gam)\n",
    "    for j in range(y_sim.shape[1]):\n",
    "      LL_sum[i,j]=sc.gammaln(r+y_sim[i,j])-\\\n",
    "                  sc.gammaln(y_sim[i,j]+1)- \\\n",
    "                  sc.gammaln(r)+\\\n",
    "                  r*np.log(mu)+\\\n",
    "                  y_sim[i,j]*np.log(1-mu)\n",
    "\n",
    "  LL_sum = -1*np.sum(LL_sum)\n",
    "  return LL_sum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "IKCrBdw4FTM5"
   },
   "source": [
    "### rmse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-JqiA6QfIbbz"
   },
   "outputs": [],
   "source": [
    "# prediction rmse\n",
    "def rmse_nbglm(op,x,y_sim,y_true):\n",
    "  #get parameters\n",
    "  x_op = op.x\n",
    "  r_op=x_op[0]\n",
    "  b0_op=x_op[1]\n",
    "  loggam_op=x_op[2]\n",
    "  b_op=x_op[3:]\n",
    "  gam_op = np.exp(loggam_op)\n",
    "\n",
    "  K = x.shape[1]\n",
    "  response = np.zeros((K,))\n",
    "\n",
    "  for i in range(K):\n",
    "      mu = (gam_op*np.exp(b0_op+np.dot(x[:,i],b_op))+1)**(-1/gam_op)\n",
    "      response[i] = (r_op*(1/mu-1));\n",
    "\n",
    "  rmse_true = np.sqrt(np.mean((y_true-response)**2))\n",
    "  rmse_sim = np.sqrt(np.mean((y_sim-response.reshape(K,1))**2))\n",
    "\n",
    "  return rmse_true, rmse_sim, response\n",
    "\n",
    "def rmse_sod(op,x,y_sim,y_true):\n",
    "  #get parameters\n",
    "  x_op = op.x\n",
    "  r_op=x_op[0]\n",
    "  b0_op=x_op[1]\n",
    "  loggam_op=x_op[2]\n",
    "  s_op = x_op[3]\n",
    "  b_op=x_op[4:]\n",
    "  gam_op = np.exp(loggam_op)\n",
    "\n",
    "  K = x.shape[1]\n",
    "  response = np.zeros((K,))\n",
    "  N_sim = y_sim.shape[1]\n",
    "\n",
    "  for i in range(K):\n",
    "      mu = (gam_op*np.exp(b0_op+np.dot(x[:,i],b_op))+1)**(-1/gam_op)\n",
    "      #theta_eb = (N_sim*r_op+s_op*mu)/(N_sim*r_op+np.sum(y_sim,1)[i]+s_op);\n",
    "      response[i] = (r_op*(1/mu-1))\n",
    "\n",
    "  rmse_true = np.sqrt(np.mean((y_true-response)**2))\n",
    "  rmse_sim = np.sqrt(np.mean((y_sim-response.reshape(K,1))**2))\n",
    "\n",
    "  return rmse_true, rmse_sim, response\n",
    "    \n",
    "def rmse_mcmc(fit,x,y_sim,y_true):\n",
    "  K = x.shape[1]\n",
    "  mcmc_pred_y = np.mean(fit['y_new_sod_glm'], axis = 0)\n",
    "  rmse_true = np.sqrt(np.mean((y_true - mcmc_pred_y)**2))\n",
    "  rmse_sim = np.sqrt(np.mean((y_sim - mcmc_pred_y.reshape(K,1))**2))\n",
    "  return rmse_true, rmse_sim, mcmc_pred_y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "NnjtwfqcIOAX"
   },
   "source": [
    "# Modeling (N_iter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 68
    },
    "colab_type": "code",
    "id": "ArWbUoQdykDe",
    "outputId": "9c9e2ec7-e9f0-4245-dd80-9e884febd405",
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "33.080079493447556\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/msc/app/anaconda3/envs/mcmcstan/lib/python3.6/site-packages/ipykernel_launcher.py:42: RuntimeWarning: divide by zero encountered in log\n",
      "WARNING:pystan:15 of 2000 iterations ended with a divergence (0.75 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n",
      "/home/msc/app/anaconda3/envs/mcmcstan/lib/python3.6/site-packages/ipykernel_launcher.py:17: RuntimeWarning: invalid value encountered in double_scalars\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "4.304102442641915\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/msc/app/anaconda3/envs/mcmcstan/lib/python3.6/site-packages/ipykernel_launcher.py:42: RuntimeWarning: invalid value encountered in multiply\n",
      "WARNING:pystan:Rhat above 1.1 or below 0.9 indicates that the chains very likely have not mixed\n",
      "WARNING:pystan:5 of 2000 iterations ended with a divergence (0.25 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n",
      "WARNING:pystan:500 of 2000 iterations saturated the maximum tree depth of 10 (25 %)\n",
      "WARNING:pystan:Run again with max_treedepth larger than 10 to avoid saturation\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "8.033809620981208\n",
      "simulation mse\n",
      "3.2027043712746393\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:pystan:2 of 2000 iterations ended with a divergence (0.1 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "39.09787287555817\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:pystan:1 of 2000 iterations ended with a divergence (0.05 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "7.758139548397591\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:pystan:6 of 2000 iterations ended with a divergence (0.3 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "7.080123157176505\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:pystan:1 of 2000 iterations ended with a divergence (0.05 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n",
      "WARNING:pystan:1 of 2000 iterations saturated the maximum tree depth of 10 (0.05 %)\n",
      "WARNING:pystan:Run again with max_treedepth larger than 10 to avoid saturation\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "2.4047267706815862\n",
      "simulation mse\n",
      "11.992661945853632\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:pystan:1 of 2000 iterations ended with a divergence (0.05 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n",
      "WARNING:pystan:1 of 2000 iterations saturated the maximum tree depth of 10 (0.05 %)\n",
      "WARNING:pystan:Run again with max_treedepth larger than 10 to avoid saturation\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "6.7829497504797\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:pystan:10 of 2000 iterations ended with a divergence (0.5 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "3.632810004655066\n",
      "simulation mse\n",
      "6.615081218354977\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:pystan:3 of 2000 iterations ended with a divergence (0.15 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "6.9897808490222175\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:pystan:7 of 2000 iterations ended with a divergence (0.35 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "4.875371115641926\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:pystan:5 of 2000 iterations ended with a divergence (0.25 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "5.1170537104227\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:pystan:1 of 2000 iterations ended with a divergence (0.05 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "15.606542336784921\n",
      "simulation mse\n",
      "7.646907967650386\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:pystan:1 of 2000 iterations ended with a divergence (0.05 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "7.335841513972694\n",
      "simulation mse\n",
      "4.729285288519964\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:pystan:8 of 2000 iterations ended with a divergence (0.4 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "5.952252523670086\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:pystan:7 of 2000 iterations ended with a divergence (0.35 %).\n",
      "WARNING:pystan:Try running with adapt_delta larger than 0.8 to remove the divergences.\n"
     ]
    }
   ],
   "source": [
    "#start modeling\n",
    "history = dict()\n",
    "N_iter = 20\n",
    "\n",
    "#bounds sod\n",
    "bnds_sod = [[1,7],[0,10],[0,3],[30,70]]\n",
    "bnds_sod.extend([[-1,1]]*M)\n",
    "\n",
    "#bounds nbglm\n",
    "bnds_nbglm = [[1,7],[0,10],[0,3]]\n",
    "bnds_nbglm.extend([[-1,1]]*M)\n",
    "\n",
    "seeds = range(N_iter)\n",
    "for sim_i in range(N_iter):\n",
    "  #get simulation data\n",
    "  data = simulate(pars, seeds[sim_i])\n",
    "  x = data['x']\n",
    "  y_sim = data['y_sim']\n",
    "  y_true = data['y_true']\n",
    "\n",
    "  N_sim = pars['N_sim']\n",
    "  r = pars['r']\n",
    "  M = pars['M']\n",
    "  b0 = pars['b0']\n",
    "  b = pars['b']\n",
    "  loggam = pars['loggam']\n",
    "  s = pars['s']\n",
    "  K = pars['K']\n",
    "\n",
    "\n",
    "   #simulation N_iter times\n",
    "  #SOD model\n",
    "  x0 = [r,b0,loggam,s]\n",
    "  x0.extend(b)\n",
    "  t0 = time.time()\n",
    "  op_sod = scipy.optimize.minimize(S0D_sum, x0, args=(K, y_sim, x,), \\\n",
    "                                 bounds = bnds_sod, method='SLSQP')\n",
    "  t1 = time.time()\n",
    "  t_sod = t1-t0\n",
    "  if not op_sod.success:\n",
    "    print('not converge in sod model')\n",
    "\n",
    "  #rmse\n",
    "  rmse_sod_true, rmse_sod_sim, y_sod_est = rmse_sod(op_sod,x,y_sim,y_true) \n",
    "  #record\n",
    "  history['op_sod_'+str(sim_i)] = op_sod\n",
    "  history['t_sod_'+str(sim_i)] = t_sod\n",
    "  history['rmse_sod_true'+str(sim_i)] = rmse_sod_true\n",
    "  history['rmse_sod_sim'+str(sim_i)] = rmse_sod_sim\n",
    "  history['y_sod_est'+str(sim_i)] = y_sod_est\n",
    "\n",
    "  \n",
    "  #NBGLM model\n",
    "  x1 = [r,b0,loggam]\n",
    "  x1.extend(b)\n",
    "  t0 = time.time()\n",
    "  op_nbglm = scipy.optimize.minimize(NBGLM_sum, x1, bounds = bnds_nbglm,\n",
    "                              args=(K, y_sim, x,), \\\n",
    "                            method='SLSQP')\n",
    "  t1 = time.time()\n",
    "  t_nb = t1-t0\n",
    "  if not op_nbglm.success:\n",
    "    print('not converge in nbglm model')\n",
    "\n",
    "  #rmse\n",
    "  rmse_nbglm_true, rmse_nbglm_sim, y_nbglm_est = rmse_nbglm(op_nbglm,x,y_sim,y_true)\n",
    "  #record\n",
    "  history['op_nbglm_'+str(sim_i)] = op_nbglm\n",
    "  history['t_nbglm_'+str(sim_i)] = t_nb\n",
    "  history['rmse_nbglm_true'+str(sim_i)] = rmse_nbglm_true\n",
    "  history['rmse_nbglm_sim'+str(sim_i)] = rmse_nbglm_sim\n",
    "  history['y_nbglm_est'+str(sim_i)]=y_nbglm_est\n",
    "\n",
    "\n",
    "  #MCMC model\n",
    "  t0 = time.time()\n",
    "  fit = sm.sampling(data = dict(N = K, M = M, P = N_sim, y = y_sim, x=x),\n",
    "                  #pars = [\"b0\", \"b1\", 'b2', \"r\",'s','gam'],\n",
    "                  init= 'random',\n",
    "                  seed = 4,\n",
    "                  iter = 1000, \n",
    "                  n_jobs = 4,\n",
    "                  chains = 4,\n",
    "                  #control = dict(adapt_delta=1,max_treedepth=12),\n",
    "                  verbose = True)\n",
    "  t1 = time.time()\n",
    "  t_mcmc = t1-t0\n",
    "\n",
    "  #rmse\n",
    "  rmse_mcmc_true, rmse_mcmc_sim, y_mcmc_est = rmse_mcmc(fit,x,y_sim,y_true)\n",
    "  #record\n",
    "  history['mcmc_fit'+str(sim_i)] = fit\n",
    "  history['mcmc_t'+str(sim_i)] = t_mcmc\n",
    "  history['rmse_mcmc_true'+str(sim_i)] = rmse_mcmc_true\n",
    "  history['rmse_mcmc_sim'+str(sim_i)] = rmse_mcmc_sim\n",
    "  history['y_mcmc_est'+str(sim_i)] = y_mcmc_est\n",
    "#"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "UWo3ruJGNrlp"
   },
   "source": [
    "## Visualization of weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "vcGe6Zc_KV1x"
   },
   "outputs": [],
   "source": [
    "def plot_b(b_pred, b_true, name):\n",
    "  b_mean = np.mean(b_pred, axis = 0)\n",
    "  b_error = stats.sem(b_pred,axis =0)\n",
    "\n",
    "  import matplotlib.pyplot as plt\n",
    "  from matplotlib.patches import Circle\n",
    "\n",
    "  fig, ax = plt.subplots(figsize=(3, 3))\n",
    "\n",
    "  #line\n",
    "  x_plot = np.linspace(-1,1,100)\n",
    "  y_plot = x_plot\n",
    "  plt.plot(x_plot, y_plot, '-b', label='y=x')\n",
    "\n",
    "  #points\n",
    "  for i in range(len(b_true)):\n",
    "      p = Circle((b_true[i], b_mean[i]), np.sqrt(b_error[i]/np.pi), alpha = 0.4)\n",
    "      ax.add_artist(p)\n",
    "  # plt.scatter(b,b_pred_op_mean,s=np.sqrt(np.abs(b_pred_op_error)))\n",
    "\n",
    "  plt.ylim([-1.2,1.2])\n",
    "  plt.xlim([-1.2,1.2])\n",
    "  plt.xlabel('True weights')\n",
    "  plt.ylabel('Estimated weights')\n",
    "  plt.title(name)\n",
    "  plt.plot()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## rmse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_rmse(rmse, order):\n",
    "  #order: true,0; sim: 1\n",
    "  import scipy.stats\n",
    "  rmse_mean = np.mean(rmse, axis = 0)\n",
    "  rmse_error = stats.sem(rmse,axis =0)/np.abs(rmse_mean)\n",
    "\n",
    "  return rmse_mean[order],rmse_error[order]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "DILwRoYXI-T-"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.484562740751698 8.802798001728219 9.611235728916029\n",
      "0.09052545771743097 0.20177407883340784 0.22284345074107567\n"
     ]
    }
   ],
   "source": [
    "from scipy import stats\n",
    "# true, sim\n",
    "rmse_mcmc_arr = np.zeros((N_iter,2))\n",
    "rmse_sod_arr = np.zeros((N_iter,2))\n",
    "rmse_nbglm_arr = np.zeros((N_iter,2))\n",
    "for i in range(N_iter):\n",
    "  #mcmc\n",
    "  rmse_mcmc_arr[i,0] = history['rmse_mcmc_true'+str(i)]\n",
    "  rmse_mcmc_arr[i,1] = history['rmse_mcmc_sim'+str(i)]\n",
    "  \n",
    "\n",
    "  #sod\n",
    "  rmse_sod_arr[i,0] = history['rmse_sod_true'+str(i)]\n",
    "  rmse_sod_arr[i,1] = history['rmse_sod_sim'+str(i)]\n",
    "  \n",
    "\n",
    "  #nbglm\n",
    "  rmse_nbglm_arr[i,0] = history['rmse_nbglm_true'+str(i)]\n",
    "  rmse_nbglm_arr[i,1] = history['rmse_nbglm_sim'+str(i)]\n",
    "  \n",
    "\n",
    "rmse_mcmc_mean,rmse_mcmc_error = get_rmse(rmse_mcmc_arr, 0)\n",
    "rmse_sod_mean,rmse_sod_error = get_rmse(rmse_sod_arr, 0)\n",
    "rmse_nbglm_mean,rmse_nbglm_error = get_rmse(rmse_nbglm_arr, 0)\n",
    "\n",
    "print(rmse_mcmc_mean,rmse_sod_mean,rmse_nbglm_mean)\n",
    "print(rmse_mcmc_error,rmse_sod_error,rmse_nbglm_error)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "zgxRcd2NmoA9"
   },
   "source": [
    "### time for processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Gb8pdbSOlUEr"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6.004557847976685 0.3622146129608154 0.19660453796386718\n"
     ]
    }
   ],
   "source": [
    "from scipy import stats\n",
    "# true, sim\n",
    "t_mcmc = np.zeros((N_iter,1))\n",
    "t_sod = np.zeros((N_iter,1))\n",
    "t_nbglm = np.zeros((N_iter,1))\n",
    "for i in range(N_iter):\n",
    "  # mcmc\n",
    "  t_mcmc[i,0] = history['mcmc_t'+str(sim_i)]\n",
    "\n",
    "  #sod\n",
    "  t_sod[i,0] = history['t_sod_'+str(i)]\n",
    "\n",
    "  #nbglm\n",
    "  t_nbglm[i,0] = history['t_nbglm_'+str(i)]\n",
    "    \n",
    "t_mcmc_mean = np.mean(t_mcmc)\n",
    "t_sod_mean = np.mean(t_sod)\n",
    "t_nbglm_mean = np.mean(t_nbglm) \n",
    "\n",
    "print(t_mcmc_mean, t_sod_mean,t_nbglm_mean)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## estimated spike counts with real spike couts\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "simulation mse\n",
      "33.080079493447556\n",
      "simulation mse\n",
      "4.304102442641915\n",
      "simulation mse\n",
      "8.033809620981208\n",
      "simulation mse\n",
      "3.2027043712746393\n",
      "simulation mse\n",
      "39.09787287555817\n",
      "simulation mse\n",
      "7.758139548397591\n",
      "simulation mse\n",
      "7.080123157176505\n",
      "simulation mse\n",
      "2.4047267706815862\n",
      "simulation mse\n",
      "11.992661945853632\n",
      "simulation mse\n",
      "6.7829497504797\n",
      "simulation mse\n",
      "3.632810004655066\n",
      "simulation mse\n",
      "6.615081218354977\n",
      "simulation mse\n",
      "6.9897808490222175\n",
      "simulation mse\n",
      "4.875371115641926\n",
      "simulation mse\n",
      "5.1170537104227\n",
      "simulation mse\n",
      "15.606542336784921\n",
      "simulation mse\n",
      "7.646907967650386\n",
      "simulation mse\n",
      "7.335841513972694\n",
      "simulation mse\n",
      "4.729285288519964\n",
      "simulation mse\n",
      "5.952252523670086\n"
     ]
    }
   ],
   "source": [
    "#recalculate y true and y sim\n",
    "for i in range(N_iter):\n",
    "  #get simulation data\n",
    "  data = simulate(pars, seeds[i])\n",
    "  x = data['x']\n",
    "  y_sim = data['y_sim']\n",
    "  y_true = data['y_true']\n",
    "\n",
    "  #mcmc\n",
    "  fit = history['mcmc_fit'+str(i)]\n",
    "  #sod\n",
    "  op_sod = history['op_sod_'+str(i)]\n",
    "\n",
    "  #nbglm\n",
    "  op_nbglm = history['op_nbglm_'+str(i)]\n",
    "\n",
    "  if i == 0:\n",
    "    y_response = y_true\n",
    "    mcmc_response = rmse_mcmc(fit,x,y_sim,y_true)[2]\n",
    "    sod_response = rmse_sod(op_sod,x,y_sim,y_true)[2]\n",
    "    nbglm_response = rmse_nbglm(op_nbglm,x,y_sim,y_true)[2]\n",
    "  else:\n",
    "    y_response = np.append(y_response, y_true)\n",
    "    mcmc_response = np.append(mcmc_response, rmse_mcmc(fit,x,y_sim,y_true)[2])\n",
    "    sod_response = np.append(sod_response, rmse_sod(op_sod,x,y_sim,y_true)[2])\n",
    "    nbglm_response = np.append(nbglm_response, rmse_nbglm(op_nbglm,x,y_sim,y_true)[2])\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(sod_response, y_response, 'o')\n",
    "plt.xlabel('true spike counts')\n",
    "plt.ylabel('estimate spike counts')\n",
    "plt.title('SODS model')\n",
    "plt.show()\n",
    "\n",
    "plt.plot(nbglm_response, y_response, 'o')\n",
    "plt.xlabel('true spike counts')\n",
    "plt.ylabel('estimate spike counts')\n",
    "plt.title('NBGLM model')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "plt.plot(mcmc_response, y_response, 'o')\n",
    "plt.xlabel('true spike counts')\n",
    "plt.ylabel('estimate spike counts')\n",
    "plt.title('MCMC model')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "g6mMhnHELyfa"
   },
   "source": [
    "## SAVE RECORD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "XhRttGFdUBEL"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/msc/app/anaconda3/envs/mcmcstan/lib/python3.6/site-packages/ipykernel_launcher.py:19: UserWarning: Pickling fit objects is an experimental feature!\n",
      "The relevant StanModel instance must be pickled along with this fit object.\n",
      "When unpickling the StanModel must be unpickled first.\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "import random\n",
    "file_id = 'K'+str(K)+'_Sim'+str(N_sim)+\\\n",
    "'_gam_'+str(np.int(np.round(np.exp(loggam))))+\\\n",
    "'_s'+str(s)+'_r'+str(r)+'_Ne'+str(M)+'.pkl'\n",
    "\n",
    "# obj0, obj1, obj2 are created here...\n",
    "\n",
    "# Saving the objects:\n",
    "with open(file_id, 'wb') as f:  # Python 3: open(..., 'wb')\n",
    "    pickle.dump({'model':sm, \n",
    "                 'history':history,\n",
    "                 'pars':pars,\n",
    "                 'rmse':[rmse_mcmc_mean,rmse_mcmc_error,\n",
    "                         rmse_sod_mean,rmse_sod_error,\n",
    "                         rmse_nbglm_mean,rmse_nbglm_error],\n",
    "                 't':[t_mcmc_mean,t_sod_mean,t_nbglm_mean],\n",
    "                'p':[p_mcmc, p_sod, p_nbglm]},\n",
    "                f, protocol=-1)\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "-5JhNiA667jT"
   ],
   "name": "spike_counts.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
